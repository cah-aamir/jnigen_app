// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_import

import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../_init.dart" show jniLookup;

/// from: com.fasterxml.jackson.core.JsonToken
class JsonToken extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  JsonToken.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $JsonTokenType();

  static final _get_NOT_AVAILABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__NOT_AVAILABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get NOT_AVAILABLE =>
      const $JsonTokenType().fromRef(_get_NOT_AVAILABLE().object);

  static final _get_START_OBJECT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__START_OBJECT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken START_OBJECT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get START_OBJECT =>
      const $JsonTokenType().fromRef(_get_START_OBJECT().object);

  static final _get_END_OBJECT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__END_OBJECT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken END_OBJECT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get END_OBJECT =>
      const $JsonTokenType().fromRef(_get_END_OBJECT().object);

  static final _get_START_ARRAY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__START_ARRAY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken START_ARRAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get START_ARRAY =>
      const $JsonTokenType().fromRef(_get_START_ARRAY().object);

  static final _get_END_ARRAY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__END_ARRAY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken END_ARRAY
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get END_ARRAY =>
      const $JsonTokenType().fromRef(_get_END_ARRAY().object);

  static final _get_FIELD_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__FIELD_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken FIELD_NAME
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get FIELD_NAME =>
      const $JsonTokenType().fromRef(_get_FIELD_NAME().object);

  static final _get_VALUE_EMBEDDED_OBJECT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_EMBEDDED_OBJECT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_EMBEDDED_OBJECT =>
      const $JsonTokenType().fromRef(_get_VALUE_EMBEDDED_OBJECT().object);

  static final _get_VALUE_STRING =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_STRING")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_STRING
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_STRING =>
      const $JsonTokenType().fromRef(_get_VALUE_STRING().object);

  static final _get_VALUE_NUMBER_INT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_NUMBER_INT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_NUMBER_INT =>
      const $JsonTokenType().fromRef(_get_VALUE_NUMBER_INT().object);

  static final _get_VALUE_NUMBER_FLOAT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_NUMBER_FLOAT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_NUMBER_FLOAT =>
      const $JsonTokenType().fromRef(_get_VALUE_NUMBER_FLOAT().object);

  static final _get_VALUE_TRUE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_TRUE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_TRUE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_TRUE =>
      const $JsonTokenType().fromRef(_get_VALUE_TRUE().object);

  static final _get_VALUE_FALSE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_FALSE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_FALSE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_FALSE =>
      const $JsonTokenType().fromRef(_get_VALUE_FALSE().object);

  static final _get_VALUE_NULL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonToken__VALUE_NULL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.JsonToken VALUE_NULL
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken get VALUE_NULL =>
      const $JsonTokenType().fromRef(_get_VALUE_NULL().object);

  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "JsonToken__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public com.fasterxml.jackson.core.JsonToken[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JArray<JsonToken> values() =>
      const jni.JArrayType($JsonTokenType()).fromRef(_values().object);

  static final _valueOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.fasterxml.jackson.core.JsonToken valueOf(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonToken valueOf(jni.JString string) =>
      const $JsonTokenType().fromRef(_valueOf(string.reference).object);

  static final _id = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("JsonToken__id")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int id()
  int id() => _id(reference).integer;

  static final _asString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__asString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String asString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString asString() =>
      const jni.JStringType().fromRef(_asString(reference).object);

  static final _asCharArray = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__asCharArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final char[] asCharArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JChar> asCharArray() => const jni.JArrayType(jni.JCharType())
      .fromRef(_asCharArray(reference).object);

  static final _asByteArray = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__asByteArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final byte[] asByteArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JByte> asByteArray() => const jni.JArrayType(jni.JByteType())
      .fromRef(_asByteArray(reference).object);

  static final _isNumeric = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__isNumeric")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isNumeric()
  bool isNumeric() => _isNumeric(reference).boolean;

  static final _isStructStart = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__isStructStart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isStructStart()
  bool isStructStart() => _isStructStart(reference).boolean;

  static final _isStructEnd = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__isStructEnd")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isStructEnd()
  bool isStructEnd() => _isStructEnd(reference).boolean;

  static final _isScalarValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__isScalarValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isScalarValue()
  bool isScalarValue() => _isScalarValue(reference).boolean;

  static final _isBoolean = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonToken__isBoolean")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isBoolean()
  bool isBoolean() => _isBoolean(reference).boolean;
}

class $JsonTokenType extends jni.JObjType<JsonToken> {
  const $JsonTokenType();

  @override
  String get signature => r"Lcom/fasterxml/jackson/core/JsonToken;";

  @override
  JsonToken fromRef(jni.JObjectPtr ref) => JsonToken.fromRef(ref);
}

extension $JsonTokenArray on jni.JArray<JsonToken> {
  JsonToken operator [](int index) {
    return (elementType as $JsonTokenType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, JsonToken value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
