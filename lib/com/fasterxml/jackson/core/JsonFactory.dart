// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_import

import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "JsonParser.dart" as jsonparser_;
import "../../../../_init.dart" show jniLookup;

/// from: com.fasterxml.jackson.core.JsonFactory
class JsonFactory extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  JsonFactory.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $JsonFactoryType();

  /// from: static public final java.lang.String FORMAT_NAME_JSON
  static const FORMAT_NAME_JSON = "JSON";

  static final _get_DEFAULT_FACTORY_FEATURE_FLAGS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonFactory__DEFAULT_FACTORY_FEATURE_FLAGS")
          .asFunction<jni.JniResult Function()>();

  /// from: static protected final int DEFAULT_FACTORY_FEATURE_FLAGS
  static int get DEFAULT_FACTORY_FEATURE_FLAGS =>
      _get_DEFAULT_FACTORY_FEATURE_FLAGS().integer;

  static final _get_DEFAULT_PARSER_FEATURE_FLAGS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonFactory__DEFAULT_PARSER_FEATURE_FLAGS")
          .asFunction<jni.JniResult Function()>();

  /// from: static protected final int DEFAULT_PARSER_FEATURE_FLAGS
  static int get DEFAULT_PARSER_FEATURE_FLAGS =>
      _get_DEFAULT_PARSER_FEATURE_FLAGS().integer;

  static final _get_DEFAULT_GENERATOR_FEATURE_FLAGS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonFactory__DEFAULT_GENERATOR_FEATURE_FLAGS")
          .asFunction<jni.JniResult Function()>();

  /// from: static protected final int DEFAULT_GENERATOR_FEATURE_FLAGS
  static int get DEFAULT_GENERATOR_FEATURE_FLAGS =>
      _get_DEFAULT_GENERATOR_FEATURE_FLAGS().integer;

  static final _get_DEFAULT_ROOT_VALUE_SEPARATOR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonFactory__DEFAULT_ROOT_VALUE_SEPARATOR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final com.fasterxml.jackson.core.SerializableString DEFAULT_ROOT_VALUE_SEPARATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get DEFAULT_ROOT_VALUE_SEPARATOR => const jni.JObjectType()
      .fromRef(_get_DEFAULT_ROOT_VALUE_SEPARATOR().object);

  /// from: static public final char DEFAULT_QUOTE_CHAR
  static const DEFAULT_QUOTE_CHAR = 34;

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "JsonFactory__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  JsonFactory() : super.fromRef(_ctor().object);

  static final _ctor1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__ctor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.fasterxml.jackson.core.ObjectCodec objectCodec)
  JsonFactory.ctor1(jni.JObject objectCodec)
      : super.fromRef(_ctor1(objectCodec.reference).object);

  static final _ctor2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__ctor2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void <init>(com.fasterxml.jackson.core.JsonFactory jsonFactory, com.fasterxml.jackson.core.ObjectCodec objectCodec)
  JsonFactory.ctor2(JsonFactory jsonFactory, jni.JObject objectCodec)
      : super.fromRef(
            _ctor2(jsonFactory.reference, objectCodec.reference).object);

  static final _ctor3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__ctor3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.fasterxml.jackson.core.JsonFactoryBuilder jsonFactoryBuilder)
  JsonFactory.ctor3(jni.JObject jsonFactoryBuilder)
      : super.fromRef(_ctor3(jsonFactoryBuilder.reference).object);

  static final _ctor4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("JsonFactory__ctor4")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: protected void <init>(com.fasterxml.jackson.core.TSFBuilder tSFBuilder, boolean z)
  JsonFactory.ctor4(jni.JObject tSFBuilder, bool z)
      : super.fromRef(_ctor4(tSFBuilder.reference, z ? 1 : 0).object);

  static final _rebuild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__rebuild")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.TSFBuilder rebuild()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject rebuild() =>
      const jni.JObjectType().fromRef(_rebuild(reference).object);

  static final _builder =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "JsonFactory__builder")
          .asFunction<jni.JniResult Function()>();

  /// from: static public com.fasterxml.jackson.core.TSFBuilder builder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject builder() =>
      const jni.JObjectType().fromRef(_builder().object);

  static final _copy = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__copy")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory copy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory copy() =>
      const $JsonFactoryType().fromRef(_copy(reference).object);

  static final _readResolve = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__readResolve")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected java.lang.Object readResolve()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject readResolve() =>
      const jni.JObjectType().fromRef(_readResolve(reference).object);

  static final _requiresPropertyOrdering = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__requiresPropertyOrdering")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean requiresPropertyOrdering()
  bool requiresPropertyOrdering() =>
      _requiresPropertyOrdering(reference).boolean;

  static final _canHandleBinaryNatively = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__canHandleBinaryNatively")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canHandleBinaryNatively()
  bool canHandleBinaryNatively() => _canHandleBinaryNatively(reference).boolean;

  static final _canUseCharArrays = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__canUseCharArrays")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canUseCharArrays()
  bool canUseCharArrays() => _canUseCharArrays(reference).boolean;

  static final _canParseAsync = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__canParseAsync")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canParseAsync()
  bool canParseAsync() => _canParseAsync(reference).boolean;

  static final _getFormatReadFeatureType = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__getFormatReadFeatureType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Class getFormatReadFeatureType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getFormatReadFeatureType() => const jni.JObjectType()
      .fromRef(_getFormatReadFeatureType(reference).object);

  static final _getFormatWriteFeatureType = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__getFormatWriteFeatureType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Class getFormatWriteFeatureType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getFormatWriteFeatureType() => const jni.JObjectType()
      .fromRef(_getFormatWriteFeatureType(reference).object);

  static final _canUseSchema = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__canUseSchema")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema formatSchema)
  bool canUseSchema(jni.JObject formatSchema) =>
      _canUseSchema(reference, formatSchema.reference).boolean;

  static final _getFormatName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getFormatName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getFormatName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getFormatName() =>
      const jni.JStringType().fromRef(_getFormatName(reference).object);

  static final _hasFormat = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__hasFormat")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.format.MatchStrength hasFormat(com.fasterxml.jackson.core.format.InputAccessor inputAccessor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject hasFormat(jni.JObject inputAccessor) => const jni.JObjectType()
      .fromRef(_hasFormat(reference, inputAccessor.reference).object);

  static final _requiresCustomCodec = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__requiresCustomCodec")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean requiresCustomCodec()
  bool requiresCustomCodec() => _requiresCustomCodec(reference).boolean;

  static final _hasJSONFormat = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__hasJSONFormat")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected com.fasterxml.jackson.core.format.MatchStrength hasJSONFormat(com.fasterxml.jackson.core.format.InputAccessor inputAccessor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject hasJSONFormat(jni.JObject inputAccessor) =>
      const jni.JObjectType()
          .fromRef(_hasJSONFormat(reference, inputAccessor.reference).object);

  static final _version = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__version")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.Version version()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject version() =>
      const jni.JObjectType().fromRef(_version(reference).object);

  static final _configure = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("JsonFactory__configure")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonFactory$Feature feature, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory configure(jni.JObject feature, bool z) => const $JsonFactoryType()
      .fromRef(_configure(reference, feature.reference, z ? 1 : 0).object);

  static final _enable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__enable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory enable(com.fasterxml.jackson.core.JsonFactory$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory enable(jni.JObject feature) => const $JsonFactoryType()
      .fromRef(_enable(reference, feature.reference).object);

  static final _disable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__disable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonFactory$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory disable(jni.JObject feature) => const $JsonFactoryType()
      .fromRef(_disable(reference, feature.reference).object);

  static final _isEnabled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__isEnabled")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isEnabled(com.fasterxml.jackson.core.JsonFactory$Feature feature)
  bool isEnabled(jni.JObject feature) =>
      _isEnabled(reference, feature.reference).boolean;

  static final _getParserFeatures = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getParserFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getParserFeatures()
  int getParserFeatures() => _getParserFeatures(reference).integer;

  static final _getGeneratorFeatures = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getGeneratorFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getGeneratorFeatures()
  int getGeneratorFeatures() => _getGeneratorFeatures(reference).integer;

  static final _getFormatParserFeatures = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__getFormatParserFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFormatParserFeatures()
  int getFormatParserFeatures() => _getFormatParserFeatures(reference).integer;

  static final _getFormatGeneratorFeatures = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__getFormatGeneratorFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFormatGeneratorFeatures()
  int getFormatGeneratorFeatures() =>
      _getFormatGeneratorFeatures(reference).integer;

  static final _configure1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("JsonFactory__configure1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonParser$Feature feature, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory configure1(jni.JObject feature, bool z) =>
      const $JsonFactoryType()
          .fromRef(_configure1(reference, feature.reference, z ? 1 : 0).object);

  static final _enable1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__enable1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory enable(com.fasterxml.jackson.core.JsonParser$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory enable1(jni.JObject feature) => const $JsonFactoryType()
      .fromRef(_enable1(reference, feature.reference).object);

  static final _disable1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__disable1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonParser$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory disable1(jni.JObject feature) => const $JsonFactoryType()
      .fromRef(_disable1(reference, feature.reference).object);

  static final _isEnabled1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__isEnabled1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature feature)
  bool isEnabled1(jni.JObject feature) =>
      _isEnabled1(reference, feature.reference).boolean;

  static final _isEnabled2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__isEnabled2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature streamReadFeature)
  bool isEnabled2(jni.JObject streamReadFeature) =>
      _isEnabled2(reference, streamReadFeature.reference).boolean;

  static final _getInputDecorator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getInputDecorator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.io.InputDecorator getInputDecorator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getInputDecorator() =>
      const jni.JObjectType().fromRef(_getInputDecorator(reference).object);

  static final _setInputDecorator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__setInputDecorator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory setInputDecorator(com.fasterxml.jackson.core.io.InputDecorator inputDecorator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory setInputDecorator(jni.JObject inputDecorator) =>
      const $JsonFactoryType().fromRef(
          _setInputDecorator(reference, inputDecorator.reference).object);

  static final _configure2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("JsonFactory__configure2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonGenerator$Feature feature, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory configure2(jni.JObject feature, bool z) =>
      const $JsonFactoryType()
          .fromRef(_configure2(reference, feature.reference, z ? 1 : 0).object);

  static final _enable2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__enable2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory enable(com.fasterxml.jackson.core.JsonGenerator$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory enable2(jni.JObject feature) => const $JsonFactoryType()
      .fromRef(_enable2(reference, feature.reference).object);

  static final _disable2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__disable2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonGenerator$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory disable2(jni.JObject feature) => const $JsonFactoryType()
      .fromRef(_disable2(reference, feature.reference).object);

  static final _isEnabled3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__isEnabled3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature feature)
  bool isEnabled3(jni.JObject feature) =>
      _isEnabled3(reference, feature.reference).boolean;

  static final _isEnabled4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__isEnabled4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isEnabled(com.fasterxml.jackson.core.StreamWriteFeature streamWriteFeature)
  bool isEnabled4(jni.JObject streamWriteFeature) =>
      _isEnabled4(reference, streamWriteFeature.reference).boolean;

  static final _getCharacterEscapes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getCharacterEscapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCharacterEscapes() =>
      const jni.JObjectType().fromRef(_getCharacterEscapes(reference).object);

  static final _setCharacterEscapes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__setCharacterEscapes")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory setCharacterEscapes(jni.JObject characterEscapes) =>
      const $JsonFactoryType().fromRef(
          _setCharacterEscapes(reference, characterEscapes.reference).object);

  static final _getOutputDecorator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getOutputDecorator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.io.OutputDecorator getOutputDecorator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getOutputDecorator() =>
      const jni.JObjectType().fromRef(_getOutputDecorator(reference).object);

  static final _setOutputDecorator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__setOutputDecorator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory setOutputDecorator(com.fasterxml.jackson.core.io.OutputDecorator outputDecorator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory setOutputDecorator(jni.JObject outputDecorator) =>
      const $JsonFactoryType().fromRef(
          _setOutputDecorator(reference, outputDecorator.reference).object);

  static final _setRootValueSeparator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__setRootValueSeparator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory setRootValueSeparator(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory setRootValueSeparator(jni.JString string) =>
      const $JsonFactoryType()
          .fromRef(_setRootValueSeparator(reference, string.reference).object);

  static final _getRootValueSeparator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getRootValueSeparator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getRootValueSeparator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getRootValueSeparator() =>
      const jni.JStringType().fromRef(_getRootValueSeparator(reference).object);

  static final _setCodec = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__setCodec")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonFactory setCodec(com.fasterxml.jackson.core.ObjectCodec objectCodec)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonFactory setCodec(jni.JObject objectCodec) => const $JsonFactoryType()
      .fromRef(_setCodec(reference, objectCodec.reference).object);

  static final _getCodec = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__getCodec")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.ObjectCodec getCodec()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCodec() =>
      const jni.JObjectType().fromRef(_getCodec(reference).object);

  static final _createParser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser(jni.JObject file) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser(reference, file.reference).object);

  static final _createParser1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(java.net.URL uRL)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser1(jni.JObject uRL) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser1(reference, uRL.reference).object);

  static final _createParser2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(java.io.InputStream inputStream)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser2(jni.JObject inputStream) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser2(reference, inputStream.reference).object);

  static final _createParser3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(java.io.Reader reader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser3(jni.JObject reader) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser3(reference, reader.reference).object);

  static final _createParser4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser4(jni.JArray<jni.JByte> bs) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser4(reference, bs.reference).object);

  static final _createParser5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("JsonFactory__createParser5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(byte[] bs, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser5(
          jni.JArray<jni.JByte> bs, int i, int i1) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser5(reference, bs.reference, i, i1).object);

  static final _createParser6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser6(jni.JString string) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser6(reference, string.reference).object);

  static final _createParser7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(char[] cs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser7(jni.JArray<jni.JChar> cs) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser7(reference, cs.reference).object);

  static final _createParser8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("JsonFactory__createParser8")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(char[] cs, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser8(
          jni.JArray<jni.JChar> cs, int i, int i1) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser8(reference, cs.reference, i, i1).object);

  static final _createParser9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createParser9")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createParser(java.io.DataInput dataInput)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createParser9(jni.JObject dataInput) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createParser9(reference, dataInput.reference).object);

  static final _createNonBlockingByteArrayParser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonFactory__createNonBlockingByteArrayParser")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createNonBlockingByteArrayParser()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createNonBlockingByteArrayParser() =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createNonBlockingByteArrayParser(reference).object);

  static final _createGenerator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createGenerator")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream outputStream, com.fasterxml.jackson.core.JsonEncoding jsonEncoding)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createGenerator(
          jni.JObject outputStream, jni.JObject jsonEncoding) =>
      const jni.JObjectType().fromRef(_createGenerator(
              reference, outputStream.reference, jsonEncoding.reference)
          .object);

  static final _createGenerator1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createGenerator1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream outputStream)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createGenerator1(jni.JObject outputStream) =>
      const jni.JObjectType()
          .fromRef(_createGenerator1(reference, outputStream.reference).object);

  static final _createGenerator2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createGenerator2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer writer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createGenerator2(jni.JObject writer) => const jni.JObjectType()
      .fromRef(_createGenerator2(reference, writer.reference).object);

  static final _createGenerator3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createGenerator3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.File file, com.fasterxml.jackson.core.JsonEncoding jsonEncoding)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createGenerator3(jni.JObject file, jni.JObject jsonEncoding) =>
      const jni.JObjectType().fromRef(
          _createGenerator3(reference, file.reference, jsonEncoding.reference)
              .object);

  static final _createGenerator4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createGenerator4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.DataOutput dataOutput, com.fasterxml.jackson.core.JsonEncoding jsonEncoding)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createGenerator4(
          jni.JObject dataOutput, jni.JObject jsonEncoding) =>
      const jni.JObjectType().fromRef(_createGenerator4(
              reference, dataOutput.reference, jsonEncoding.reference)
          .object);

  static final _createGenerator5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createGenerator5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.DataOutput dataOutput)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createGenerator5(jni.JObject dataOutput) =>
      const jni.JObjectType()
          .fromRef(_createGenerator5(reference, dataOutput.reference).object);

  static final _createJsonParser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonParser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser(jni.JObject file) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser(reference, file.reference).object);

  static final _createJsonParser1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonParser1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(java.net.URL uRL)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser1(jni.JObject uRL) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser1(reference, uRL.reference).object);

  static final _createJsonParser2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonParser2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(java.io.InputStream inputStream)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser2(jni.JObject inputStream) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser2(reference, inputStream.reference).object);

  static final _createJsonParser3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonParser3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(java.io.Reader reader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser3(jni.JObject reader) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser3(reference, reader.reference).object);

  static final _createJsonParser4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonParser4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser4(jni.JArray<jni.JByte> bs) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser4(reference, bs.reference).object);

  static final _createJsonParser5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("JsonFactory__createJsonParser5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(byte[] bs, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser5(
          jni.JArray<jni.JByte> bs, int i, int i1) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser5(reference, bs.reference, i, i1).object);

  static final _createJsonParser6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonParser6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser createJsonParser(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsonparser_.JsonParser createJsonParser6(jni.JString string) =>
      const jsonparser_.$JsonParserType()
          .fromRef(_createJsonParser6(reference, string.reference).object);

  static final _createJsonGenerator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonGenerator")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createJsonGenerator(java.io.OutputStream outputStream, com.fasterxml.jackson.core.JsonEncoding jsonEncoding)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createJsonGenerator(
          jni.JObject outputStream, jni.JObject jsonEncoding) =>
      const jni.JObjectType().fromRef(_createJsonGenerator(
              reference, outputStream.reference, jsonEncoding.reference)
          .object);

  static final _createJsonGenerator1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonGenerator1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createJsonGenerator(java.io.Writer writer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createJsonGenerator1(jni.JObject writer) =>
      const jni.JObjectType()
          .fromRef(_createJsonGenerator1(reference, writer.reference).object);

  static final _createJsonGenerator2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonFactory__createJsonGenerator2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonGenerator createJsonGenerator(java.io.OutputStream outputStream)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createJsonGenerator2(jni.JObject outputStream) =>
      const jni.JObjectType().fromRef(
          _createJsonGenerator2(reference, outputStream.reference).object);
}

class $JsonFactoryType extends jni.JObjType<JsonFactory> {
  const $JsonFactoryType();

  @override
  String get signature => r"Lcom/fasterxml/jackson/core/JsonFactory;";

  @override
  JsonFactory fromRef(jni.JObjectPtr ref) => JsonFactory.fromRef(ref);
}

extension $JsonFactoryArray on jni.JArray<JsonFactory> {
  JsonFactory operator [](int index) {
    return (elementType as $JsonFactoryType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, JsonFactory value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
