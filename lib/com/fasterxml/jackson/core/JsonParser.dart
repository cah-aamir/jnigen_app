// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_import

import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "JsonToken.dart" as jsontoken_;
import "../../../../_init.dart" show jniLookup;

/// from: com.fasterxml.jackson.core.JsonParser
class JsonParser extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  JsonParser.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $JsonParserType();

  static final _get_DEFAULT_READ_CAPABILITIES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_JsonParser__DEFAULT_READ_CAPABILITIES")
          .asFunction<jni.JniResult Function()>();

  /// from: static protected final com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get DEFAULT_READ_CAPABILITIES =>
      const jni.JObjectType().fromRef(_get_DEFAULT_READ_CAPABILITIES().object);

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "JsonParser__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: protected void <init>()
  JsonParser() : super.fromRef(_ctor().object);

  static final _ctor1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "JsonParser__ctor1")
          .asFunction<jni.JniResult Function(int)>();

  /// from: protected void <init>(int i)
  JsonParser.ctor1(int i) : super.fromRef(_ctor1(i).object);

  static final _getCodec = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getCodec")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.ObjectCodec getCodec()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCodec() =>
      const jni.JObjectType().fromRef(_getCodec(reference).object);

  static final _setCodec = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__setCodec")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setCodec(com.fasterxml.jackson.core.ObjectCodec objectCodec)
  void setCodec(jni.JObject objectCodec) =>
      _setCodec(reference, objectCodec.reference).check();

  static final _getInputSource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getInputSource")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getInputSource()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getInputSource() =>
      const jni.JObjectType().fromRef(_getInputSource(reference).object);

  static final _setRequestPayloadOnError = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "JsonParser__setRequestPayloadOnError")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload requestPayload)
  void setRequestPayloadOnError(jni.JObject requestPayload) =>
      _setRequestPayloadOnError(reference, requestPayload.reference).check();

  static final _setRequestPayloadOnError1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "JsonParser__setRequestPayloadOnError1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setRequestPayloadOnError(byte[] bs, java.lang.String string)
  void setRequestPayloadOnError1(
          jni.JArray<jni.JByte> bs, jni.JString string) =>
      _setRequestPayloadOnError1(reference, bs.reference, string.reference)
          .check();

  static final _setRequestPayloadOnError2 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "JsonParser__setRequestPayloadOnError2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setRequestPayloadOnError(java.lang.String string)
  void setRequestPayloadOnError2(jni.JString string) =>
      _setRequestPayloadOnError2(reference, string.reference).check();

  static final _setSchema = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__setSchema")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSchema(com.fasterxml.jackson.core.FormatSchema formatSchema)
  void setSchema(jni.JObject formatSchema) =>
      _setSchema(reference, formatSchema.reference).check();

  static final _getSchema = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getSchema")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.FormatSchema getSchema()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getSchema() =>
      const jni.JObjectType().fromRef(_getSchema(reference).object);

  static final _canUseSchema = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__canUseSchema")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema formatSchema)
  bool canUseSchema(jni.JObject formatSchema) =>
      _canUseSchema(reference, formatSchema.reference).boolean;

  static final _requiresCustomCodec = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__requiresCustomCodec")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean requiresCustomCodec()
  bool requiresCustomCodec() => _requiresCustomCodec(reference).boolean;

  static final _canParseAsync = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__canParseAsync")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canParseAsync()
  bool canParseAsync() => _canParseAsync(reference).boolean;

  static final _getNonBlockingInputFeeder = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonParser__getNonBlockingInputFeeder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getNonBlockingInputFeeder() => const jni.JObjectType()
      .fromRef(_getNonBlockingInputFeeder(reference).object);

  static final _getReadCapabilities = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getReadCapabilities")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getReadCapabilities() =>
      const jni.JObjectType().fromRef(_getReadCapabilities(reference).object);

  static final _version = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__version")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.Version version()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject version() =>
      const jni.JObjectType().fromRef(_version(reference).object);

  static final _close = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__close")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void close()
  void close() => _close(reference).check();

  static final _isClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__isClosed")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isClosed()
  bool isClosed() => _isClosed(reference).boolean;

  static final _getParsingContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getParsingContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonStreamContext getParsingContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getParsingContext() =>
      const jni.JObjectType().fromRef(_getParsingContext(reference).object);

  static final _currentLocation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__currentLocation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonLocation currentLocation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject currentLocation() =>
      const jni.JObjectType().fromRef(_currentLocation(reference).object);

  static final _currentTokenLocation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__currentTokenLocation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonLocation currentTokenLocation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject currentTokenLocation() =>
      const jni.JObjectType().fromRef(_currentTokenLocation(reference).object);

  static final _getCurrentLocation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getCurrentLocation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCurrentLocation() =>
      const jni.JObjectType().fromRef(_getCurrentLocation(reference).object);

  static final _getTokenLocation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getTokenLocation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonLocation getTokenLocation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getTokenLocation() =>
      const jni.JObjectType().fromRef(_getTokenLocation(reference).object);

  static final _currentValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__currentValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object currentValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject currentValue() =>
      const jni.JObjectType().fromRef(_currentValue(reference).object);

  static final _assignCurrentValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__assignCurrentValue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void assignCurrentValue(java.lang.Object object)
  void assignCurrentValue(jni.JObject object) =>
      _assignCurrentValue(reference, object.reference).check();

  static final _getCurrentValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getCurrentValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getCurrentValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getCurrentValue() =>
      const jni.JObjectType().fromRef(_getCurrentValue(reference).object);

  static final _setCurrentValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__setCurrentValue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setCurrentValue(java.lang.Object object)
  void setCurrentValue(jni.JObject object) =>
      _setCurrentValue(reference, object.reference).check();

  static final _releaseBuffered = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__releaseBuffered")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int releaseBuffered(java.io.OutputStream outputStream)
  int releaseBuffered(jni.JObject outputStream) =>
      _releaseBuffered(reference, outputStream.reference).integer;

  static final _releaseBuffered1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__releaseBuffered1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int releaseBuffered(java.io.Writer writer)
  int releaseBuffered1(jni.JObject writer) =>
      _releaseBuffered1(reference, writer.reference).integer;

  static final _enable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__enable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.core.JsonParser$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser enable(jni.JObject feature) => const $JsonParserType()
      .fromRef(_enable(reference, feature.reference).object);

  static final _disable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__disable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.core.JsonParser$Feature feature)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser disable(jni.JObject feature) => const $JsonParserType()
      .fromRef(_disable(reference, feature.reference).object);

  static final _configure = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("JsonParser__configure")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser configure(com.fasterxml.jackson.core.JsonParser$Feature feature, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser configure(jni.JObject feature, bool z) => const $JsonParserType()
      .fromRef(_configure(reference, feature.reference, z ? 1 : 0).object);

  static final _isEnabled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__isEnabled")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature feature)
  bool isEnabled(jni.JObject feature) =>
      _isEnabled(reference, feature.reference).boolean;

  static final _isEnabled1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__isEnabled1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature streamReadFeature)
  bool isEnabled1(jni.JObject streamReadFeature) =>
      _isEnabled1(reference, streamReadFeature.reference).boolean;

  static final _getFeatureMask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getFeatureMask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFeatureMask()
  int getFeatureMask() => _getFeatureMask(reference).integer;

  static final _setFeatureMask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("JsonParser__setFeatureMask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser setFeatureMask(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser setFeatureMask(int i) =>
      const $JsonParserType().fromRef(_setFeatureMask(reference, i).object);

  static final _overrideStdFeatures = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("JsonParser__overrideStdFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser overrideStdFeatures(int i, int i1) => const $JsonParserType()
      .fromRef(_overrideStdFeatures(reference, i, i1).object);

  static final _getFormatFeatures = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getFormatFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFormatFeatures()
  int getFormatFeatures() => _getFormatFeatures(reference).integer;

  static final _overrideFormatFeatures = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("JsonParser__overrideFormatFeatures")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public com.fasterxml.jackson.core.JsonParser overrideFormatFeatures(int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser overrideFormatFeatures(int i, int i1) => const $JsonParserType()
      .fromRef(_overrideFormatFeatures(reference, i, i1).object);

  static final _nextToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__nextToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonToken nextToken()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsontoken_.JsonToken nextToken() =>
      const jsontoken_.$JsonTokenType().fromRef(_nextToken(reference).object);

  static final _nextValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__nextValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonToken nextValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsontoken_.JsonToken nextValue() =>
      const jsontoken_.$JsonTokenType().fromRef(_nextValue(reference).object);

  static final _nextFieldName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__nextFieldName")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString serializableString)
  bool nextFieldName(jni.JObject serializableString) =>
      _nextFieldName(reference, serializableString.reference).boolean;

  static final _nextFieldName1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__nextFieldName1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String nextFieldName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString nextFieldName1() =>
      const jni.JStringType().fromRef(_nextFieldName1(reference).object);

  static final _nextTextValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__nextTextValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String nextTextValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString nextTextValue() =>
      const jni.JStringType().fromRef(_nextTextValue(reference).object);

  static final _nextIntValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("JsonParser__nextIntValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int nextIntValue(int i)
  int nextIntValue(int i) => _nextIntValue(reference, i).integer;

  static final _nextLongValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("JsonParser__nextLongValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long nextLongValue(long j)
  int nextLongValue(int j) => _nextLongValue(reference, j).long;

  static final _nextBooleanValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__nextBooleanValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Boolean nextBooleanValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject nextBooleanValue() =>
      const jni.JObjectType().fromRef(_nextBooleanValue(reference).object);

  static final _skipChildren = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__skipChildren")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonParser skipChildren()
  /// The returned object must be deleted after use, by calling the `delete` method.
  JsonParser skipChildren() =>
      const $JsonParserType().fromRef(_skipChildren(reference).object);

  static final _finishToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__finishToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishToken()
  void finishToken() => _finishToken(reference).check();

  static final _currentToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__currentToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.fasterxml.jackson.core.JsonToken currentToken()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsontoken_.JsonToken currentToken() => const jsontoken_.$JsonTokenType()
      .fromRef(_currentToken(reference).object);

  static final _currentTokenId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__currentTokenId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int currentTokenId()
  int currentTokenId() => _currentTokenId(reference).integer;

  static final _getCurrentToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getCurrentToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonToken getCurrentToken()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsontoken_.JsonToken getCurrentToken() => const jsontoken_.$JsonTokenType()
      .fromRef(_getCurrentToken(reference).object);

  static final _getCurrentTokenId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getCurrentTokenId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getCurrentTokenId()
  int getCurrentTokenId() => _getCurrentTokenId(reference).integer;

  static final _hasCurrentToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__hasCurrentToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean hasCurrentToken()
  bool hasCurrentToken() => _hasCurrentToken(reference).boolean;

  static final _hasTokenId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("JsonParser__hasTokenId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean hasTokenId(int i)
  bool hasTokenId(int i) => _hasTokenId(reference, i).boolean;

  static final _hasToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__hasToken")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean hasToken(com.fasterxml.jackson.core.JsonToken jsonToken)
  bool hasToken(jsontoken_.JsonToken jsonToken) =>
      _hasToken(reference, jsonToken.reference).boolean;

  static final _isExpectedStartArrayToken = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonParser__isExpectedStartArrayToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isExpectedStartArrayToken()
  bool isExpectedStartArrayToken() =>
      _isExpectedStartArrayToken(reference).boolean;

  static final _isExpectedStartObjectToken = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonParser__isExpectedStartObjectToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isExpectedStartObjectToken()
  bool isExpectedStartObjectToken() =>
      _isExpectedStartObjectToken(reference).boolean;

  static final _isExpectedNumberIntToken = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JsonParser__isExpectedNumberIntToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isExpectedNumberIntToken()
  bool isExpectedNumberIntToken() =>
      _isExpectedNumberIntToken(reference).boolean;

  static final _isNaN = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__isNaN")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isNaN()
  bool isNaN() => _isNaN(reference).boolean;

  static final _clearCurrentToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__clearCurrentToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clearCurrentToken()
  void clearCurrentToken() => _clearCurrentToken(reference).check();

  static final _getLastClearedToken = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getLastClearedToken")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonToken getLastClearedToken()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jsontoken_.JsonToken getLastClearedToken() =>
      const jsontoken_.$JsonTokenType()
          .fromRef(_getLastClearedToken(reference).object);

  static final _overrideCurrentName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__overrideCurrentName")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void overrideCurrentName(java.lang.String string)
  void overrideCurrentName(jni.JString string) =>
      _overrideCurrentName(reference, string.reference).check();

  static final _getCurrentName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getCurrentName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getCurrentName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getCurrentName() =>
      const jni.JStringType().fromRef(_getCurrentName(reference).object);

  static final _currentName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__currentName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String currentName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString currentName() =>
      const jni.JStringType().fromRef(_currentName(reference).object);

  static final _getText = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getText")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getText() =>
      const jni.JStringType().fromRef(_getText(reference).object);

  static final _getText1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getText1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getText(java.io.Writer writer)
  int getText1(jni.JObject writer) =>
      _getText1(reference, writer.reference).integer;

  static final _getTextCharacters = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getTextCharacters")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract char[] getTextCharacters()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JChar> getTextCharacters() =>
      const jni.JArrayType(jni.JCharType())
          .fromRef(_getTextCharacters(reference).object);

  static final _getTextLength = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getTextLength")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getTextLength()
  int getTextLength() => _getTextLength(reference).integer;

  static final _getTextOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getTextOffset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getTextOffset()
  int getTextOffset() => _getTextOffset(reference).integer;

  static final _hasTextCharacters = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__hasTextCharacters")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean hasTextCharacters()
  bool hasTextCharacters() => _hasTextCharacters(reference).boolean;

  static final _getNumberValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getNumberValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Number getNumberValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getNumberValue() =>
      const jni.JObjectType().fromRef(_getNumberValue(reference).object);

  static final _getNumberValueExact = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getNumberValueExact")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Number getNumberValueExact()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getNumberValueExact() =>
      const jni.JObjectType().fromRef(_getNumberValueExact(reference).object);

  static final _getNumberType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getNumberType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getNumberType() =>
      const jni.JObjectType().fromRef(_getNumberType(reference).object);

  static final _getByteValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getByteValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte getByteValue()
  int getByteValue() => _getByteValue(reference).byte;

  static final _getShortValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getShortValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public short getShortValue()
  int getShortValue() => _getShortValue(reference).short;

  static final _getIntValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getIntValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getIntValue()
  int getIntValue() => _getIntValue(reference).integer;

  static final _getLongValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getLongValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract long getLongValue()
  int getLongValue() => _getLongValue(reference).long;

  static final _getBigIntegerValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getBigIntegerValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.math.BigInteger getBigIntegerValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getBigIntegerValue() =>
      const jni.JObjectType().fromRef(_getBigIntegerValue(reference).object);

  static final _getFloatValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getFloatValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract float getFloatValue()
  double getFloatValue() => _getFloatValue(reference).float;

  static final _getDoubleValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getDoubleValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract double getDoubleValue()
  double getDoubleValue() => _getDoubleValue(reference).doubleFloat;

  static final _getDecimalValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getDecimalValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.math.BigDecimal getDecimalValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDecimalValue() =>
      const jni.JObjectType().fromRef(_getDecimalValue(reference).object);

  static final _getBooleanValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getBooleanValue")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getBooleanValue()
  bool getBooleanValue() => _getBooleanValue(reference).boolean;

  static final _getEmbeddedObject = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getEmbeddedObject")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getEmbeddedObject()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getEmbeddedObject() =>
      const jni.JObjectType().fromRef(_getEmbeddedObject(reference).object);

  static final _getBinaryValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getBinaryValue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant base64Variant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JByte> getBinaryValue(jni.JObject base64Variant) =>
      const jni.JArrayType(jni.JByteType())
          .fromRef(_getBinaryValue(reference, base64Variant.reference).object);

  static final _getBinaryValue1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getBinaryValue1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getBinaryValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JByte> getBinaryValue1() =>
      const jni.JArrayType(jni.JByteType())
          .fromRef(_getBinaryValue1(reference).object);

  static final _readBinaryValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readBinaryValue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int readBinaryValue(java.io.OutputStream outputStream)
  int readBinaryValue(jni.JObject outputStream) =>
      _readBinaryValue(reference, outputStream.reference).integer;

  static final _readBinaryValue1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readBinaryValue1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant base64Variant, java.io.OutputStream outputStream)
  int readBinaryValue1(jni.JObject base64Variant, jni.JObject outputStream) =>
      _readBinaryValue1(
              reference, base64Variant.reference, outputStream.reference)
          .integer;

  static final _getValueAsInt = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getValueAsInt")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getValueAsInt()
  int getValueAsInt() => _getValueAsInt(reference).integer;

  static final _getValueAsInt1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("JsonParser__getValueAsInt1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getValueAsInt(int i)
  int getValueAsInt1(int i) => _getValueAsInt1(reference, i).integer;

  static final _getValueAsLong = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getValueAsLong")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getValueAsLong()
  int getValueAsLong() => _getValueAsLong(reference).long;

  static final _getValueAsLong1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("JsonParser__getValueAsLong1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getValueAsLong(long j)
  int getValueAsLong1(int j) => _getValueAsLong1(reference, j).long;

  static final _getValueAsDouble = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getValueAsDouble")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public double getValueAsDouble()
  double getValueAsDouble() => _getValueAsDouble(reference).doubleFloat;

  static final _getValueAsDouble1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("JsonParser__getValueAsDouble1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public double getValueAsDouble(double d)
  double getValueAsDouble1(double d) =>
      _getValueAsDouble1(reference, d).doubleFloat;

  static final _getValueAsBoolean = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getValueAsBoolean")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getValueAsBoolean()
  bool getValueAsBoolean() => _getValueAsBoolean(reference).boolean;

  static final _getValueAsBoolean1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("JsonParser__getValueAsBoolean1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getValueAsBoolean(boolean z)
  bool getValueAsBoolean1(bool z) =>
      _getValueAsBoolean1(reference, z ? 1 : 0).boolean;

  static final _getValueAsString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getValueAsString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getValueAsString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getValueAsString() =>
      const jni.JStringType().fromRef(_getValueAsString(reference).object);

  static final _getValueAsString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getValueAsString1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getValueAsString(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getValueAsString1(jni.JString string) => const jni.JStringType()
      .fromRef(_getValueAsString1(reference, string.reference).object);

  static final _canReadObjectId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__canReadObjectId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canReadObjectId()
  bool canReadObjectId() => _canReadObjectId(reference).boolean;

  static final _canReadTypeId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__canReadTypeId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canReadTypeId()
  bool canReadTypeId() => _canReadTypeId(reference).boolean;

  static final _getObjectId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getObjectId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getObjectId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getObjectId() =>
      const jni.JObjectType().fromRef(_getObjectId(reference).object);

  static final _getTypeId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__getTypeId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getTypeId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getTypeId() =>
      const jni.JObjectType().fromRef(_getTypeId(reference).object);

  static final _readValueAs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readValueAs")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T readValueAs(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T readValueAs<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject class0) =>
      $T.fromRef(_readValueAs(reference, class0.reference).object);

  static final _readValueAs1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readValueAs1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T readValueAs(com.fasterxml.jackson.core.type.TypeReference typeReference)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T readValueAs1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject typeReference) =>
      $T.fromRef(_readValueAs1(reference, typeReference.reference).object);

  static final _readValuesAs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readValuesAs")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Iterator readValuesAs(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject readValuesAs<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject class0) =>
      const jni.JObjectType()
          .fromRef(_readValuesAs(reference, class0.reference).object);

  static final _readValuesAs1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readValuesAs1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Iterator readValuesAs(com.fasterxml.jackson.core.type.TypeReference typeReference)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject readValuesAs1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject typeReference) =>
      const jni.JObjectType()
          .fromRef(_readValuesAs1(reference, typeReference.reference).object);

  static final _readValueAsTree = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("JsonParser__readValueAsTree")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public T readValueAsTree()
  /// The returned object must be deleted after use, by calling the `delete` method.
  T readValueAsTree<T extends jni.JObject>(jni.JObjType<T> $T) =>
      $T.fromRef(_readValueAsTree(reference).object);
}

class $JsonParserType extends jni.JObjType<JsonParser> {
  const $JsonParserType();

  @override
  String get signature => r"Lcom/fasterxml/jackson/core/JsonParser;";

  @override
  JsonParser fromRef(jni.JObjectPtr ref) => JsonParser.fromRef(ref);
}

extension $JsonParserArray on jni.JArray<JsonParser> {
  JsonParser operator [](int index) {
    return (elementType as $JsonParserType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, JsonParser value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
